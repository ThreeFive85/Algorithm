# 시뮬레이션 유형

'''
문제 설명
    - 여행가 A는 N x N 크기의 정사각형 공간 위에 서 있습니다. 이 공간은 1 x 1 크기의 정사각형으로 나누어져 있습니다. 가장 왼쪽 위 좌표는
    (1,1)이며, 가장 오른쪽 아래 좌표는 (N,N)에 해당합니다. 여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 있으며, 시작 좌표는 항상 (1,1)
    입니다. 우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여 있습니다. 
    - 계획서에는 하나의 줄에 띄어쓰기를 기준으로 하여 L, R, U, D 중 하나의 문자가 반복적으로 적혀 있습니다. 각 문자의 의미는 다음과 같습니다.
        - L : 왼쪽으로 한 칸 이동
        - R : 오른쪽으로 한 칸 이동
        - U : 위로 한 칸 이동
        - D : 아래로 한 칸 이동
    - 이때 여행가 A가 N x N 크기의 정사각형 공간을 벗어나는 움직음은 무시됩니다. 예를 들어 (1,1)의 위치에서 L 혹은 U를 만나면 무시됩니다.
'''

'''
문제 해결 아이디어
    - 이 문제는 요구사항대로 충실히 구현하면 되는 문제
    - 일련의 명령에 따라서 개체를 차례대로 이동시킨다는 점에서 시뮬레이션(Simulation)유형으로도 분류되며 구현이 중요한 대표적인 문제 유형
        - 다만, 알고리즘 교재나 문제 풀이 사이트에 따라서 다르게 일컬을 수 있으므로, 코딩 테스트에서의 시뮬레이션 유형, 구형 유형, 
        완전 탐색 유형은 서로 유사한 점이 많다는 정도로 기억
'''


def solution(n, m):
    plans = m.split(" ")

    x, y = 1, 1

    # L, R, U, D에 따른 이동 방향
    dx = [0, 0, -1, 1]
    dy = [-1, 1, 0, 0]

    moves = ['L', 'R', 'U', 'D']

    # 이동 계획을 하나하나 확인
    for plan in plans:
        # 이동 후 좌표 구하기
        for i in range(len(moves)):
            if plan == moves[i]:
                nx = x + dx[i]
                ny = y + dy[i]

        # 공간을 벗어날 경우 무시
        if nx < 1 or ny < 1 or nx > n or ny > n:
            continue

        # 이동 수행
        x, y = nx, ny

    print(x, y)
    return x, y


solution(5, 'R R R U D D')
